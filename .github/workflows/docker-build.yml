name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save Docker image as artifact
      if: github.event_name != 'pull_request'
      run: |
        # Create artifacts directory
        mkdir -p artifacts
        
        # Save the Docker image as a tar file
        docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o artifacts/cpilint-docker-image.tar
        
        # Create a compressed version
        gzip artifacts/cpilint-docker-image.tar
        
        # Create a manifest file with image details
        cat > artifacts/image-manifest.json << EOF
        {
          "image_name": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
          "tags": ${{ steps.meta.outputs.tags }},
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "git_commit": "${{ github.sha }}",
          "git_ref": "${{ github.ref }}",
          "platforms": ["linux/amd64", "linux/arm64"]
        }
        EOF

    - name: Upload Docker image artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: cpilint-docker-image
        path: artifacts/
        retention-days: 30
